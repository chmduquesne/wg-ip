#!/bin/sh

# usage
help(){
	cat <<-EOF
	Usage: $1 [-4|-6|--subnet <subnet>] [gen <pubkey>|[dev <device> ]apply|[dev <device> ]dryrun]
	Subnet used:
	    -4
	        sets the subnet to $subnet4
	    -6
	        sets the subnet to $subnet6
	    --subnet <subnet>
	        sets an arbitrary (ipv4 or ipv6) subnet
	When the subnet is specified several times, only the last
	occurrence applies. By default -6 is enabled.
	Device used:
	    dev <device>:
	        specify the device to which the commands apply.
	    When the device option is used several times, only the last
	    occurrence applies. If no device is specified, commands are
	    applied to the first entry returned by 'wg show interfaces'
	Commands:
	    --help
	        show this message
	    --test
	        run the embedded test suite
	    gen <pubkey>:
	        generate an ip from the pubkey, in the specified subnet.
	    dryrun:
	        generate an ip from the pubkey of the specified interface (see
	        "device used"), as well as for all the peers of that same
	        interface, in the specified subnet (see "subnet used"). Create
	        commands to add this ip to the interface, as well as commands
	        to modify allowed_ips for each peer. The commands are simply
	        displayed, not applied.
	    apply:
	        actually run the commands displayed by 'dryrun'
	When several commands are specified, only the last one is
	executed. Executing '$1' without argument is the same as running
	'$1 dryrun'
	Example:
	    wg-ip dev wg0 apply
	EOF
}

fatal(){
	echo "$@" >> /dev/stderr
	exit 1
}

# zips n lists together
zip(){
	nlists=$#

	[ $nlists = 0 ] && return 0

	# assign input lists to variables
	for i in $(seq 1 $nlists); do
		eval "list$i='$1'"
		shift
	done

	while true; do
		tuple=""
		for i in $(seq 1 $nlists); do
			# return without printing the tuple if empty list
			eval "[ -z \"\$list$i\" ] && return 0"
			eval "head=\$(printf '%s\\n' \$list$i | head -n1)"
			eval "list$i=\$(printf '%s\\n' \$list$i | tail -n+2)"
			tuple="$tuple $head"
		done
		echo "$tuple"
	done
}

# unit tests for zip
test_zip(){
	status=0

	# No argument
	printf "."
	expected=''
	got="$(zip)"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip (no argument): expected '$expected', got '$res'"
		status=1
	fi

	# 1 lists of 2 elements
	printf "."
	input='- a'
	expected='- a'
	got="$(zip "$input")"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip '$input': expected '$expected', got '$res'"
		status=1
	fi

	# 2 lists of 1 elements
	printf "."
	input1="1"
	input2="a"
	expected='1 a'
	got="$(zip "$input1" "$input2")"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip '$input1' '$input2': expected '$expected', got '$res'"
		status=1
	fi

	# 2 lists of 3 elements
	printf "."
	input1="1 2 3"
	input2="a b c"
	expected='1 a 2 b 3 c'
	got="$(zip "$input1" "$input2")"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip '$input1' '$input2': expected '$expected', got '$res'"
		status=1
	fi

	# 3 lists of 3 elements
	printf "."
	input1="1 2 3"
	input2="a b c"
	input3="x y z"
	expected='1 a x 2 b y 3 c z'
	got="$(zip "$input1" "$input2" "$input3")"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip '$input1' '$input2' '$input3': expected '$expected', got '$res'"
		status=1
	fi

	# lists of different size (the smallest is taken)
	printf "."
	input1="1 2"
	input2="a b c"
	expected='1 a 2 b'
	got="$(zip "$input1" "$input2")"
	if [ "$(echo $got)" != "$(echo $expected)" ]; then
		echo "zip '$input1' '$input2': expected '$expected', got '$res'"
		status=1
	fi

	return $status
}

# convert hex to dec (portable version)
hex2dec(){
	for i in $(echo "$@"); do
		printf "%d\n" "$(( 0x$i ))"
	done
}

# expand an ipv6 address
expand_ipv6() {
	ip=$1

	# prepend 0 if we start with :
	echo $ip | grep -qs "^:" && ip="0${ip}"

	# expand ::
	if echo $ip | grep -qs "::"; then
		colons=$(echo $ip | sed 's/[^:]//g')
		missing=$(echo ":::::::::" | sed "s/$colons//")
		expanded=$(echo $missing | sed 's/:/:0/g')
		ip=$(echo $ip | sed "s/::/$expanded/")
	fi

	blocks=$(echo $ip | grep -o "[0-9a-f]\+")
	set $blocks

	printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n" \
		$(hex2dec $@)
}

# unit tests for expand_ipv6
test_expand_ipv6(){
	tests=" \
		2001:db8::2:1        2001:0db8:0000:0000:0000:0000:0002:0001 \
		2001:db8:0:1:1:1:1:1 2001:0db8:0000:0001:0001:0001:0001:0001 \
		2001:db8::1:0:0:1    2001:0db8:0000:0000:0001:0000:0000:0001 \
		2001:db8::1          2001:0db8:0000:0000:0000:0000:0000:0001 \
		::                   0000:0000:0000:0000:0000:0000:0000:0000 \
		::1                  0000:0000:0000:0000:0000:0000:0000:0001 \
		1::                  0001:0000:0000:0000:0000:0000:0000:0000 \
	"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		res="$(expand_ipv6 $1)"
		if [ $res != "$2" ]; then
			echo "expand_ipv6 $1: expected $2, got $res"
			status=1
		fi
		shift 2
	done
	return $status
}

# returns a compressed ipv6 address under the form recommended by RFC5952
compress_ipv6() {
	ip=$1

	blocks=$(echo $ip | grep -o "[0-9a-f]\+")
	set $blocks

	# compress leading zeros
	ip=$(printf "%x:%x:%x:%x:%x:%x:%x:%x\n" \
		$(hex2dec $@)
	)

	# prepend : for easier matching
	ip=:$ip

	# :: must compress the longest chain
	for pattern in :0:0:0:0:0:0:0:0 \
			:0:0:0:0:0:0:0 \
			:0:0:0:0:0:0 \
			:0:0:0:0:0 \
			:0:0:0:0 \
			:0:0; do
		if echo $ip | grep -qs $pattern; then
			ip=$(echo $ip | sed "s/$pattern/::/")
			# if the substitution occured before the end, we have :::
			ip=$(echo $ip | sed 's/:::/::/')
			break # only one substitution
		fi
	done

	# remove prepending : if necessary
	echo $ip | grep -qs "^:[^:]" && ip=$(echo $ip | sed 's/://')

	echo $ip
}

# unit tests for compress_ipv6
test_compress_ipv6(){
	tests=" \
		2001:0db8:0000:0000:0000:0000:0002:0001 2001:db8::2:1        \
		2001:0db8:0000:0001:0001:0001:0001:0001 2001:db8:0:1:1:1:1:1 \
		2001:0db8:0000:0000:0001:0000:0000:0001 2001:db8::1:0:0:1    \
		2001:0db8:0000:0000:0000:0000:0000:0001 2001:db8::1          \
		0000:0000:0000:0000:0000:0000:0000:0000 ::                   \
		0000:0000:0000:0000:0000:0000:0000:0001 ::1                  \
		0001:0000:0000:0000:0000:0000:0000:0000 1::                  \
	"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		res="$(compress_ipv6 $1)"
		if [ $res != "$2" ]; then
			echo "compress_ipv6 $1: expected $2, got $res"
			status=1
		fi
		shift 2
	done
	return $status
}

# test if the input is an ipv6
# a valid ipv6 is either the expanded form or the compressed one
is_ipv6(){
	expanded="$(expand_ipv6 $1)"
	[ "$1" = "$expanded" ] && return 0
	compressed="$(compress_ipv6 $expanded)"
	[ "$1" = "$compressed" ] && return 0
	return 1
}

# unit tests for is_ipv6
test_is_ipv6(){
	tests=" \
		2001:db8::2:1        0 \
		2001:db8:0:1:1:1:1:1 0 \
		2001:db8::1:0:0:1    0 \
		2001:db8::1          0 \
		::                   0 \
		::1                  0 \
		1::                  0 \
		2001:db8::0:1        1 \
		2001:db8::1:1:1:1:1  1 \
		2001:db8:0:0:1::1    1 \
		2001:DB8::1          1 \
	"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		is_ipv6 $1
		res=$?
		if [ "$res" != "$2" ]; then
			echo "is_ipv6 $1: expected $2, got $res"
			status=1
		fi
		shift 2
	done
	return $status
}

# test if the input is an ipv4
is_ipv4(){
	echo $1 |\
		grep -qs "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}" ||\
		return 1
	for i in $(echo $1 | grep -o "[0-9]\+"); do
		if [ "$i" -gt 255 ]; then
			return 1
		fi
	done
	return 0
}

# unit tests for is_ipv4
test_is_ipv4(){
	tests=" \
		4.2.2.2          0 \
		192.168.1.1      0 \
		0.0.0.0          0 \
		255.255.255.255  0 \
		192.168.0.1      0 \
		a.b.c.d          1 \
		255.255.255.256  1 \
		192.168.0        1 \
		1234.123.123.123 1 \
	"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		is_ipv4 $1
		res=$?
		if [ "$res" != "$2" ]; then
			echo "is_ipv4 $1: expected $2, got $res"
			status=1
		fi
		shift 2
	done
	return $status
}

# returns the bytes of a given netmask
mask_to_bytes(){
	netmask=$1
	ipversion=$2
	if [ "$ipversion" = "ipv4" ]; then
		len=4
	else
		len=16
	fi

	res=""
	for i in $(seq 0 $(( len - 1 )) ); do
		b=0
		j=$(( netmask - 8 * i))
		if [ $j -ge 8 ]; then
			b=255
		elif [ $j -gt 0 ]; then
			b=$(( (255 << (8-j)) & 255 ))
		else
			b=0
		fi
		res="$res $b"
	done
	echo $res
}

# unit tests for mask_to_bytes
test_mask_to_bytes(){
	status=0
	printf "."
	if [ "$(mask_to_bytes 8 ipv4)" != "255 0 0 0" ]; then
		echo "mask_to_bytes 8 ipv4: FAIL"
		status=1
	fi
	printf "."
	if [ "$(mask_to_bytes 9 4)" != "255 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0" ]; then
		echo "mask_to_bytes 8 ipv6: FAIL"
		status=1
	fi
	return $status
}

# generates an ipv6 from a pubkey and a subnet
gen_ipv6(){
	pubkey=$1
	subnet=$2

	prefix=$(echo $subnet | cut -d/ -f1)
	if ! is_ipv6 $prefix; then
		fatal "$prefix: not a valid ipv6 address"
	fi
	prefix=$(expand_ipv6 $prefix)

	netmask=$(echo $subnet | cut -d/ -f2)
	if [ "$netmask" -le 0 -o "$netmask" -ge 128 ]; then
		fatal "$netmask: invalid netmask"
	fi

	pubkeychecksum=$(echo $pubkey | sha256sum)

	suffix_bytes=$(echo $pubkeychecksum | grep -o "[0-9a-f]\{2\}")
	prefix_bytes=$(echo $prefix | grep -o "[0-9a-f]\{2\}")
	mask_bytes=$(mask_to_bytes $netmask "ipv6")

	bytes=""
	set $(zip "$mask_bytes" "$prefix_bytes" "$suffix_bytes")
	for i in $(seq 0 15); do
		mask_byte=$1
		prefix_byte=$(hex2dec $2)
		suffix_byte=$(hex2dec $3)

		b=$(( (prefix_byte & mask_byte) | (suffix_byte & (mask_byte^255)) ))
		bytes="$bytes $b"
		shift 3
	done

	ip=$(
		printf \
			"%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x\n" \
			$bytes \
	)
	compress_ipv6 $ip
}

# unit tests for gen_ipv6
test_gen_ipv6() {
	tests=" \
		foo fd1a:6126:2887::/48 fd1a:6126:2887:f9b1:d61e:21e7:96d7:8dcc \
		bar fd1a:6126:2887::/48 fd1a:6126:2887:6691:8c98:63af:ca94:2d0f \
		foo fd1a:6126:2887::/49 fd1a:6126:2887:79b1:d61e:21e7:96d7:8dcc \
		bar fd1a:6126:2887::/49 fd1a:6126:2887:6691:8c98:63af:ca94:2d0f \
		foo 2001:db8::/64       2001:db8::d61e:21e7:96d7:8dcc \
		bar 2001:db8::/64       2001:db8::8c98:63af:ca94:2d0f \
	"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		res="$(gen_ipv6 $1 $2)"
		if [ "$res" != "$3" ]; then
			echo "gen_ipv6 $1 $2: expected $3, got $res"
			status=1
		fi
		shift 3
	done
	return $status
}

# generates an ipv4 from a pubkey and a subnet
gen_ipv4(){
	pubkey=$1
	subnet=$2

	prefix=$(echo $subnet | cut -d/ -f1)
	if ! is_ipv4 $prefix; then
		fatal "$prefix: not a valid ipv4 address"
	fi

	netmask=$(echo $subnet | cut -d/ -f2)
	if [ "$netmask" -le 0 -o "$netmask" -ge 32 ]; then
		fatal "$netmask: invalid netmask"
	fi

	pubkeychecksum=$(echo $pubkey | sha256sum)

	suffix_bytes=$(echo $pubkeychecksum | grep -o "[0-9a-f]\{2\}")
	prefix_bytes=$(echo $prefix | grep -o "[0-9]\+")
	mask_bytes=$(mask_to_bytes $netmask "ipv4")

	set $(zip "$mask_bytes" "$prefix_bytes" "$suffix_bytes")

	bytes=""
	for i in $(seq 0 3); do
		mask_byte=$1
		prefix_byte=$2
		suffix_byte=$(hex2dec $3)

		b=$(( (prefix_byte & mask_byte) | (suffix_byte & (mask_byte^255)) ))
		bytes="$bytes $b"
		shift 3
	done

	printf "%d.%d.%d.%d\n" \
		$bytes

}

# unit tests for gen_ipv4
test_gen_ipv4() {
	tests=" \
		foo 10.0.0.0/8    10.187.157.128 \
		bar 10.0.0.0/8    10.134.94.149  \
		foo 10.0.0.0/9    10.59.157.128  \
		bar 10.0.0.0/9    10.6.94.149    \
		foo 172.16.0.0/12 172.27.157.128 \
		bar 172.16.0.0/12 172.22.94.149  \
		"
	set $tests
	status=0
	while [ "$#" != 0 ]; do
		printf "."
		res="$(gen_ipv4 $1 $2)"
		if [ "$res" != "$3" ]; then
			echo "gen_ipv4 $1: expected $3, got $res"
			status=1
		fi
		shift 3
	done
	return $status
}

# generates an ip from a pubkey and a subnet (infers the version from the
# subnet)
gen_ip(){
	pubkey=$1
	subnet=$2
	prefix=$(echo $subnet | cut -d/ -f1)
	if is_ipv6 $prefix; then
		gen_ipv6 $1 $2
	else
		gen_ipv4 $1 $2
	fi
}

# print the commands required to configure the interface with the subnet
dryrun_iface(){
	subnet="$1"
	iface="$2"

	prefix=$(echo $subnet | cut -d/ -f1)
	netmask=$(echo $subnet | cut -d/ -f2)

	ipbits=128
	if is_ipv4 $prefix; then
		ipbits=32
	fi

	# configure address
	iface_pubkey=$(wg show "$iface" public-key)
	iface_ip=$(gen_ip "$iface_pubkey" "$subnet")
	echo "ip address add $iface_ip/$netmask dev $iface"

	# configure allowed ips on each peer
	for peer_pubkey in $(wg show $iface peers); do
		peer_ip=$(gen_ip "$peer_pubkey" "$subnet")
		allowed_ips=$(wg show "$iface" allowed-ips | grep "$peer_pubkey" | cut -f2)
		[ "$allowed_ips" = "(none)" ] && allowed_ips=""
		allowed_ips="$allowed_ips $peer_ip/$ipbits"
		allowed_ips="$(echo $allowed_ips | tr ' ' ',')"
		echo "wg set $iface peer $peer_pubkey allowed-ips $allowed_ips"
	done
}

# unit tests for dryrun_iface
test_dryrun_iface(){
	printf "."
	wg(){
		mock_wg "$@"
	}
	expected_output=$(mktemp)
	cat <<-EOF > $expected_output
	ip address add 2001:db8:2:0:d61e:21e7:96d7:8dcc/64 dev wg0
	wg set wg0 peer bar allowed-ips 2001:db8::/64,fd00::/128,2001:db8:2:0:8c98:63af:ca94:2d0f/128
	wg set wg0 peer baz allowed-ips 2001:db8::1/64,2001:db8:2:0:ae7b:f4a1:177b:2b31/128
	wg set wg0 peer zuf allowed-ips 2001:db8:2:0:515b:c456:4a37:f06f/128
	EOF
	status=0
	differences=$(dryrun_iface "2001:db8:2::/64" "wg0" | diff - "$expected_output")
	if [ "$?" != 0 ]; then
		echo "test_dryrun_iface: $differences"
		status=1
	fi
	rm $expected_output
	unset -f wg
	return $status
}

# print the commands to configure the interace (if not provided, the first
# one) with the subnet
dryrun(){
	subnet="$1"
	iface="$2"

	if [ "$iface" = "" ]; then
		iface="$(wg show interfaces | tr ' ' '\n' | head -n1)"
	fi

	if [ "$iface" != "" ]; then
		dryrun_iface "$subnet" "$iface"
	fi
}

# unit tests for dryrun
test_dryrun(){
	printf "."
	wg(){
		mock_wg "$@"
	}
	expected_output=$(mktemp)
	cat <<-EOF > $expected_output
	ip address add 172.27.157.128/12 dev wg0
	wg set wg0 peer bar allowed-ips 2001:db8::/64,fd00::/128,172.22.94.149/32
	wg set wg0 peer baz allowed-ips 2001:db8::1/64,172.23.167.251/32
	wg set wg0 peer zuf allowed-ips 172.29.98.139/32
	EOF
	status=0
	differences=$(dryrun 172.16.0.0/12 | diff - "$expected_output")
	if [ "$?" != 0 ]; then
		echo "test_dryrun: $differences"
		status=1
	fi
	rm $expected_output
	unset -f wg
	return $status
}

# mock command for testing
# wg_mock show interfaces
# -> wg0
# wg_mock show wg0 public-key
# -> foo
# wg_mock show wg0 peers
# -> bar
#    baz
#    zuf
# wg_mock show wg0 allowed-ips
# -> bar	2001:db8::/64 fd00::/128
#    baz	2001:db8::1/64
#    zuf	(none)
mock_wg(){
	case "$1" in
		show)
			if [ "$2" = "interfaces" ]; then
				echo "wg0"
				return 0
			fi
			if [ "$2" = "wg0" ]; then
				if [ "$3" = "public-key" ]; then
					echo "foo"
					return 0
				fi
				if [ "$3" = "peers" ]; then
					echo "bar"
					echo "baz"
					echo "zuf"
					return 0
				fi
				if [ "$3" = "allowed-ips" ]; then
					echo "bar	2001:db8::/64 fd00::/128"
					echo "baz	2001:db8::1/64"
					echo "zuf	(none)"
				fi
			fi
			;;
	esac
}

# run the embedded tests
runtests() {
	script=$(readlink -f $0)
	testfuncs=$(grep "^test_.*()" $script | sed 's/().*$//g')
	status=0
	for i in $testfuncs; do
		printf "%s" $i
		if $i; then
			echo PASS
		else
			status=1
			echo FAIL
		fi
	done
	return $status
}

# TODO: derive the ipv6 prefix from the interface name?

# default values
subnet4="10.0.0.0/8"
subnet6="fd1a:6126:2887::/48"
subnet=$subnet6
device=""
pubkey=""
cmd="dryrun"

while [ "$#" != 0 ]; do
	case "$1" in
		--test)
			cmd="--test"
			shift
			;;
		--help)
			cmd="--help"
			shift
			;;
		-4)
			subnet=$subnet4
			shift
			;;
		-6)
			subnet=$subnet6
			shift
			;;
		--subnet)
			shift
			prefix=$(echo $1 | cut -d/ -f1)
			if is_ipv6 $prefix; then
				subnet="$1"
				ipbits=128
			elif is_ipv4 $prefix; then
				subnet="$1"
				ipbits=32
			else
				fatal "$1: not a valid subnet"
			fi
			netmask=$(echo $1 | cut -d/ -f2)
			if [ "$netmask" -le 0 -o "$netmask" -ge "$ipbits" ]; then
				fatal "$netmask: not a valid netmask for this prefix"
			fi
			shift
			;;
		gen)
			shift
			pubkey=$1
			cmd="gen"
			shift
			;;
		dev)
			shift
			device="$1"
			shift
			;;
		dryrun)
			cmd="dryrun"
			shift
			;;
		apply)
			cmd="apply"
			shift
			;;
		*)
			fatal "$1: invalid argument"
			shift
			;;
	esac
done

case "$cmd" in
	"--test")
		runtests
		;;
	"--help")
		help $(basename $0)
		;;
	"gen")
		gen_ip $pubkey $subnet
		;;
	"dryrun")
		if [ "$USER" != "root" ]; then
			fatal "This command requires root access"
		fi
		dryrun "$subnet" "$device"
		;;
	"apply")
		if [ "$USER" != "root" ]; then
			fatal "This command requires root access"
		fi
		dryrun "$subnet" "$device" | sh -x
		;;
	*)
		fatal "$cmd: wrong command (arguments parsing failed)"
		;;
esac
